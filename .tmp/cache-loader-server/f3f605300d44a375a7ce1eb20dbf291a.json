{"remainingRequest":"/home/vps/ppf/node_modules/babel-loader/lib/index.js??ref--5-2!/home/vps/ppf/server/api/client/order/model.js","dependencies":[{"path":"/home/vps/ppf/server/api/client/order/model.js","mtime":1671127458316},{"path":"/home/vps/ppf/.babelrc","mtime":1671127885972},{"path":"/home/vps/ppf/node_modules/cache-loader/dist/cjs.js","mtime":1671127657171},{"path":"/home/vps/ppf/node_modules/babel-loader/lib/index.js","mtime":1671127654997}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _mongoose = require('mongoose');\n\nvar _mongoose2 = _interopRequireDefault(_mongoose);\n\nvar _ordersController = require('../../../controllers/ordersController');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar Schema = _mongoose2.default.Schema;\n\nvar Order = new Schema({\n    id: { type: String, required: true, unique: true },\n    assetName: { type: String, required: true },\n    amount: { type: Number, required: true },\n    pledge: { type: Number, required: true },\n    openingPrice: { type: Number, required: true },\n    type: { type: String, required: true, enum: ['buy', 'sell'] },\n    userId: { type: String, required: true },\n    createdAt: { type: Number, required: true },\n    updatedAt: { type: Number },\n    isClosed: { type: Boolean, required: true },\n    closedAt: { type: Number },\n    closedPrice: { type: Number },\n    takeProfit: { type: Number },\n    stopLoss: { type: Number },\n    autoClose: { type: Boolean }\n});\n\nOrder.post('save', function () {\n    return _ordersController.ordersEvents.emit('dbUpdate');\n});\nOrder.post('findOneAndUpdate', function () {\n    return _ordersController.ordersEvents.emit('dbUpdate');\n});\n\nexports.default = _mongoose2.default.model('Order', Order);",null]}