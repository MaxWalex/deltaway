{"remainingRequest":"/Users/dimasabitov/Downloads/deltaway.20/node_modules/babel-loader/lib/index.js??ref--13-2!/Users/dimasabitov/Downloads/deltaway.20/src/apps/admin/ui/components/Form/Form.jsx","dependencies":[{"path":"/Users/dimasabitov/Downloads/deltaway.20/src/apps/admin/ui/components/Form/Form.jsx","mtime":1671546434325},{"path":"/Users/dimasabitov/Downloads/deltaway.20/.babelrc","mtime":1671546158632},{"path":"/Users/dimasabitov/Downloads/deltaway.20/node_modules/cache-loader/dist/cjs.js","mtime":1671546959174},{"path":"/Users/dimasabitov/Downloads/deltaway.20/node_modules/babel-loader/lib/index.js","mtime":1671546957682}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _regenerator = require('babel-runtime/regenerator');\n\nvar _regenerator2 = _interopRequireDefault(_regenerator);\n\nvar _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');\n\nvar _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);\n\nvar _defineProperty2 = require('babel-runtime/helpers/defineProperty');\n\nvar _defineProperty3 = _interopRequireDefault(_defineProperty2);\n\nvar _extends8 = require('babel-runtime/helpers/extends');\n\nvar _extends9 = _interopRequireDefault(_extends8);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _class,\n    _temp,\n    _jsxFileName = '/Users/dimasabitov/Downloads/deltaway.20/src/apps/admin/ui/components/Form/Form.jsx';\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _classnames = require('classnames');\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nvar _FormControl = require('@material-ui/core/FormControl');\n\nvar _FormControl2 = _interopRequireDefault(_FormControl);\n\nvar _FormHelperText = require('@material-ui/core/FormHelperText');\n\nvar _FormHelperText2 = _interopRequireDefault(_FormHelperText);\n\nvar _Snackbar = require('@material-ui/core/Snackbar');\n\nvar _Snackbar2 = _interopRequireDefault(_Snackbar);\n\nvar _SnackbarContent = require('@material-ui/core/SnackbarContent');\n\nvar _SnackbarContent2 = _interopRequireDefault(_SnackbarContent);\n\nvar _Error = require('@material-ui/icons/Error');\n\nvar _Error2 = _interopRequireDefault(_Error);\n\nvar _styles = require('@material-ui/core/styles');\n\nvar _getLangsValuesForArray = require('./utils/getLangsValuesForArray');\n\nvar _getLangsValuesForArray2 = _interopRequireDefault(_getLangsValuesForArray);\n\nvar _getLangsValuesForObject = require('./utils/getLangsValuesForObject');\n\nvar _getLangsValuesForObject2 = _interopRequireDefault(_getLangsValuesForObject);\n\nvar _noop = require('@tinkoff/utils/function/noop');\n\nvar _noop2 = _interopRequireDefault(_noop);\n\nvar _empty = require('@tinkoff/utils/is/empty');\n\nvar _empty2 = _interopRequireDefault(_empty);\n\nvar _plainObject = require('@tinkoff/utils/is/plainObject');\n\nvar _plainObject2 = _interopRequireDefault(_plainObject);\n\nvar _array = require('@tinkoff/utils/is/array');\n\nvar _array2 = _interopRequireDefault(_array);\n\nvar _string = require('@tinkoff/utils/is/string');\n\nvar _string2 = _interopRequireDefault(_string);\n\nvar _each = require('@tinkoff/utils/array/each');\n\nvar _each2 = _interopRequireDefault(_each);\n\nvar _any = require('@tinkoff/utils/array/any');\n\nvar _any2 = _interopRequireDefault(_any);\n\nvar _clone = require('@tinkoff/utils/clone');\n\nvar _clone2 = _interopRequireDefault(_clone);\n\nvar _validators = require('./validators');\n\nvar _validators2 = _interopRequireDefault(_validators);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar materialStyles = function materialStyles(theme) {\n    return {\n        form: {\n            display: 'flex',\n            flexDirection: 'column',\n            width: '100%'\n        },\n        error: {\n            backgroundColor: theme.palette.error.dark\n        },\n        success: {\n            backgroundColor: theme.palette.success.main\n        },\n        icon: {\n            fontSize: 20\n        },\n        iconVariant: {\n            opacity: 0.9,\n            marginRight: theme.spacing.unit\n        },\n        message: {\n            display: 'flex',\n            alignItems: 'center'\n        },\n        margin: {\n            margin: theme.spacing.unit\n        }\n    };\n};\n\nvar Form = (_temp = _class = function (_Component) {\n    (0, _inherits3.default)(Form, _Component);\n\n    function Form() {\n        var _ref,\n            _this2 = this;\n\n        (0, _classCallCheck3.default)(this, Form);\n\n        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n            args[_key] = arguments[_key];\n        }\n\n        var _this = (0, _possibleConstructorReturn3.default)(this, (_ref = Form.__proto__ || Object.getPrototypeOf(Form)).call.apply(_ref, [this].concat(args)));\n\n        _this.getFieldsValidators = function () {\n            var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _this.props;\n            return props.schema.fields.reduce(function (validators, field) {\n                if (!field.validators) {\n                    return validators;\n                }\n\n                var langs = _this.props.langs;\n\n                var newValidators = {};\n\n                if (field.valueLangStructure) {\n                    newValidators = langs.reduce(function (result, lang) {\n                        return (0, _extends9.default)({}, result, (0, _defineProperty3.default)({}, lang + '_' + field.name, field.validators));\n                    }, {});\n                } else {\n                    newValidators[field.name] = field.validators;\n                }\n\n                return (0, _extends9.default)({}, validators, newValidators);\n            }, {});\n        };\n\n        _this.getAnotherLangsChanges = function (field, value) {\n            if (!field.valueLangStructure || (0, _string2.default)(field.valueLangStructure)) {\n                return {};\n            }\n\n            var langs = _this.props.langs;\n            var _this$state = _this.state,\n                values = _this$state.values,\n                currentLang = _this$state.lang;\n\n            var changesByLang = {};\n\n            langs.forEach(function (lang) {\n                if (currentLang !== lang) {\n                    if ((0, _array2.default)(field.valueLangStructure) && (0, _array2.default)(value)) {\n                        return (0, _getLangsValuesForArray2.default)([lang + '_' + field.name], [lang + '_' + field.name], value, field.valueLangStructure, values, changesByLang);\n                    }\n\n                    if ((0, _plainObject2.default)(field.valueLangStructure) && (0, _plainObject2.default)(value)) {\n                        return (0, _getLangsValuesForObject2.default)([lang + '_' + field.name], [lang + '_' + field.name], value, field.valueLangStructure, values, changesByLang);\n                    }\n                }\n            }, {});\n\n            return changesByLang;\n        };\n\n        _this.createField = function (field, i) {\n            var _React$createElement, _React$createElement2, _React$createElement3;\n\n            if (field.hidden) {\n                return;\n            }\n\n            var _this$state2 = _this.state,\n                values = _this$state2.values,\n                validationMessages = _this$state2.validationMessages,\n                lang = _this$state2.lang;\n\n            var FieldComponent = field.component;\n            var fieldName = field.valueLangStructure ? lang + '_' + field.name : field.name;\n            var validationMessage = validationMessages[fieldName];\n\n            var fieldProps = (0, _extends9.default)({\n                onChange: _this.handleFieldChange(field, fieldName),\n                onBlur: _this.handleFieldBlur(field),\n                name: fieldName,\n                value: values[fieldName],\n                isRequired: (0, _any2.default)(function (validator) {\n                    return validator.name === 'required';\n                }, field.validators || []),\n                validationMessage: validationMessage,\n                schema: field.schema || {},\n                key: i,\n                news: _this.props.initialValues\n            }, field.type ? { type: field.type } : {});\n\n            return _react2.default.createElement(\n                _FormControl2.default,\n                (_React$createElement3 = { key: i, error: !!validationMessage, 'data-qa-file': 'Form',\n                    __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 196\n                    },\n                    __self: _this2\n                }, (0, _defineProperty3.default)(_React$createElement3, '__self', _this2), (0, _defineProperty3.default)(_React$createElement3, 'data-qa-file', 'Form'), (0, _defineProperty3.default)(_React$createElement3, 'data-qa-file', 'Form'), _React$createElement3),\n                _react2.default.createElement(FieldComponent, (0, _extends9.default)({}, fieldProps, (0, _defineProperty3.default)({\n                    'data-qa-file': 'Form',\n                    __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 197\n                    },\n                    __self: _this2\n                }, '__self', _this2))),\n                field.hint && _react2.default.createElement(\n                    _FormHelperText2.default,\n                    (_React$createElement = {\n                        'data-qa-file': 'Form',\n                        __source: {\n                            fileName: _jsxFileName,\n                            lineNumber: 198\n                        },\n                        __self: _this2\n                    }, (0, _defineProperty3.default)(_React$createElement, '__self', _this2), (0, _defineProperty3.default)(_React$createElement, 'data-qa-file', 'Form'), (0, _defineProperty3.default)(_React$createElement, 'data-qa-file', 'Form'), _React$createElement),\n                    field.hint\n                ),\n                validationMessage && _react2.default.createElement(\n                    _FormHelperText2.default,\n                    (_React$createElement2 = {\n                        'data-qa-file': 'Form',\n                        __source: {\n                            fileName: _jsxFileName,\n                            lineNumber: 199\n                        },\n                        __self: _this2\n                    }, (0, _defineProperty3.default)(_React$createElement2, '__self', _this2), (0, _defineProperty3.default)(_React$createElement2, 'data-qa-file', 'Form'), (0, _defineProperty3.default)(_React$createElement2, 'data-qa-file', 'Form'), _React$createElement2),\n                    validationMessage\n                )\n            );\n        };\n\n        _this.validateForm = function () {\n            var _this$props = _this.props,\n                langs = _this$props.langs,\n                schema = _this$props.schema;\n            var currentLang = _this.state.lang;\n\n            var validationMessages = {};\n            var isValid = true;\n            var isAnotherLangValid = true;\n            var isCurrentLangValid = true;\n\n            schema.fields.map(function (field) {\n                var newValidationMessages = {};\n\n                if (field.valueLangStructure) {\n                    newValidationMessages = langs.reduce(function (result, lang) {\n                        var validationMessage = _this.validateField(lang + '_' + field.name);\n\n                        if (validationMessage) {\n                            if (isCurrentLangValid) {\n                                if (currentLang === lang) {\n                                    isCurrentLangValid = false;\n                                }\n                            }\n                            if (isAnotherLangValid) {\n                                if (currentLang !== lang) {\n                                    isAnotherLangValid = false;\n                                }\n                            }\n\n                            return (0, _extends9.default)({}, result, (0, _defineProperty3.default)({}, lang + '_' + field.name, validationMessage));\n                        }\n\n                        return result;\n                    }, {});\n                } else {\n                    var validationMessage = _this.validateField(field.name);\n\n                    if (validationMessage) {\n                        if (isCurrentLangValid) {\n                            isCurrentLangValid = false;\n                        }\n\n                        newValidationMessages[field.name] = validationMessage;\n                    }\n                }\n\n                if (!(0, _empty2.default)(newValidationMessages)) {\n                    isValid = false;\n                }\n\n                validationMessages = (0, _extends9.default)({}, validationMessages, newValidationMessages);\n            });\n\n            _this.setState({\n                validationMessages: validationMessages\n            });\n\n            return { isValid: isValid, isOnlyAnotherLangInvalid: !isAnotherLangValid && isCurrentLangValid };\n        };\n\n        _this.validateField = function (filedName) {\n            var values = _this.state.values;\n\n            var validators = _this.validators[filedName] || [];\n            var validationMessage = '';\n\n            (0, _each2.default)(function (_ref2) {\n                var name = _ref2.name,\n                    options = _ref2.options;\n\n                var validatorOptions = (0, _plainObject2.default)(options) ? options : {};\n                var validator = _validators2.default[name];\n\n                if (validator && !validationMessage) {\n                    validationMessage = validator(values[filedName], validatorOptions, values, filedName);\n                }\n            }, validators);\n\n            return validationMessage;\n        };\n\n        _this.handleFieldChange = function (field, fieldName) {\n            return function (value) {\n                var changes = (0, _extends9.default)({}, _this.getAnotherLangsChanges(field, value), (0, _defineProperty3.default)({}, fieldName, value));\n                var _this$state3 = _this.state,\n                    values = _this$state3.values,\n                    validationMessages = _this$state3.validationMessages;\n\n                var newValues = (0, _extends9.default)({}, values, changes);\n\n                if ('lang' in changes) {\n                    _this.setState({\n                        lang: newValues.lang\n                    });\n                }\n\n                _this.props.onChange(newValues, changes);\n                _this.setState({\n                    values: newValues,\n                    validationMessages: (0, _extends9.default)({}, validationMessages, (0, _defineProperty3.default)({}, fieldName, ''))\n                });\n            };\n        };\n\n        _this.handleFieldBlur = function (field) {\n            return function () {\n                var _this$state4 = _this.state,\n                    validationMessages = _this$state4.validationMessages,\n                    lang = _this$state4.lang;\n\n\n                var fieldName = field.valueLangStructure ? lang + '_' + field.name : field.name;\n                var validationMessage = _this.validateField(fieldName);\n\n                _this.setState({\n                    validationMessages: (0, _extends9.default)({}, validationMessages, (0, _defineProperty3.default)({}, fieldName, validationMessage))\n                });\n            };\n        };\n\n        _this.handleSubmit = function () {\n            var _ref3 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(event) {\n                var _this$validateForm, isValid, isOnlyAnotherLangInvalid;\n\n                return _regenerator2.default.wrap(function _callee$(_context) {\n                    while (1) {\n                        switch (_context.prev = _context.next) {\n                            case 0:\n                                event.preventDefault();\n\n                                if (!_this.state.isClickedSubmit) {\n                                    _context.next = 3;\n                                    break;\n                                }\n\n                                return _context.abrupt('return');\n\n                            case 3:\n\n                                _this.state.isClickedSubmit = true;\n\n                                _this$validateForm = _this.validateForm(), isValid = _this$validateForm.isValid, isOnlyAnotherLangInvalid = _this$validateForm.isOnlyAnotherLangInvalid;\n\n                                if (!isValid) {\n                                    _context.next = 17;\n                                    break;\n                                }\n\n                                _context.prev = 6;\n                                _context.next = 9;\n                                return _this.props.onSubmit(_this.state.values);\n\n                            case 9:\n                                _context.next = 15;\n                                break;\n\n                            case 11:\n                                _context.prev = 11;\n                                _context.t0 = _context['catch'](6);\n\n                                _this.setState({ errorText: _context.t0.error });\n                                _this.state.isClickedSubmit = false;\n\n                            case 15:\n                                _context.next = 22;\n                                break;\n\n                            case 17:\n                                if (!isOnlyAnotherLangInvalid) {\n                                    _context.next = 20;\n                                    break;\n                                }\n\n                                _this.setState({\n                                    errorText: 'Поправьте валидацию для других языков'\n                                });\n                                return _context.abrupt('return');\n\n                            case 20:\n\n                                _this.setState({\n                                    errorText: 'Поправьте валидацию'\n                                });\n\n                                _this.state.isClickedSubmit = false;\n\n                            case 22:\n                            case 'end':\n                                return _context.stop();\n                        }\n                    }\n                }, _callee, _this2, [[6, 11]]);\n            }));\n\n            return function (_x2) {\n                return _ref3.apply(this, arguments);\n            };\n        }();\n\n        _this.handleHideFailMessage = function () {\n            _this.setState({\n                errorText: ''\n            });\n        };\n\n        _this.state = {\n            values: (0, _clone2.default)(_this.props.initialValues),\n            validationMessages: {},\n            lang: _this.props.langs[0],\n            isClickedSubmit: _this.props.isClickedSubmit\n        };\n        _this.validators = _this.getFieldsValidators();\n        return _this;\n    }\n\n    // static getDerivedStateFromProps (props, state) {\n    //     if (props.isClickedSubmit !== state.isClickedSubmit) {\n    //         return {\n    //             showSuccess: true\n    //         };\n    //     }\n    //\n    //     return null;\n    // }\n\n    (0, _createClass3.default)(Form, [{\n        key: 'componentWillReceiveProps',\n        value: function componentWillReceiveProps(nextProps, nextContext) {\n            if (nextProps.schema !== this.props.schema) {\n                this.validators = this.getFieldsValidators(nextProps);\n            }\n\n            if (nextProps.initialValues !== this.props.initialValues) {\n                this.setState({\n                    values: (0, _clone2.default)(nextProps.initialValues)\n                });\n            }\n        }\n    }, {\n        key: 'render',\n        value: function render() {\n            var _this3 = this,\n                _React$createElement4,\n                _React$createElement5,\n                _React$createElement6,\n                _React$createElement7,\n                _React$createElement8,\n                _React$createElement9;\n\n            var _props = this.props,\n                schema = _props.schema,\n                classes = _props.classes;\n            var errorText = this.state.errorText;\n\n\n            return _react2.default.createElement(\n                'div',\n                (_React$createElement9 = {\n                    'data-qa-file': 'Form',\n                    __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 369\n                    },\n                    __self: this\n                }, (0, _defineProperty3.default)(_React$createElement9, '__self', this), (0, _defineProperty3.default)(_React$createElement9, 'data-qa-file', 'Form'), (0, _defineProperty3.default)(_React$createElement9, 'data-qa-file', 'Form'), _React$createElement9),\n                _react2.default.createElement(\n                    'form',\n                    (_React$createElement4 = { onSubmit: this.handleSubmit, className: classes.form, 'data-qa-file': 'Form',\n                        __source: {\n                            fileName: _jsxFileName,\n                            lineNumber: 370\n                        },\n                        __self: this\n                    }, (0, _defineProperty3.default)(_React$createElement4, '__self', this), (0, _defineProperty3.default)(_React$createElement4, 'data-qa-file', 'Form'), (0, _defineProperty3.default)(_React$createElement4, 'data-qa-file', 'Form'), _React$createElement4),\n                    schema.fields.map(function (field, i) {\n                        return _this3.createField(field, i);\n                    })\n                ),\n                _react2.default.createElement(\n                    _Snackbar2.default,\n                    (_React$createElement8 = {\n                        anchorOrigin: {\n                            vertical: 'bottom',\n                            horizontal: 'right'\n                        },\n                        onClose: this.handleHideFailMessage,\n                        open: !!errorText,\n                        autoHideDuration: 2000,\n                        'data-qa-file': 'Form',\n                        __source: {\n                            fileName: _jsxFileName,\n                            lineNumber: 373\n                        },\n                        __self: this\n                    }, (0, _defineProperty3.default)(_React$createElement8, '__self', this), (0, _defineProperty3.default)(_React$createElement8, 'data-qa-file', 'Form'), (0, _defineProperty3.default)(_React$createElement8, 'data-qa-file', 'Form'), _React$createElement8),\n                    _react2.default.createElement(_SnackbarContent2.default, (_React$createElement7 = {\n                        className: (0, _classnames2.default)(classes.error, classes.margin),\n                        message: _react2.default.createElement(\n                            'span',\n                            (_React$createElement6 = { id: 'client-snackbar', className: classes.message, 'data-qa-file': 'Form',\n                                __source: {\n                                    fileName: _jsxFileName,\n                                    lineNumber: 385\n                                },\n                                __self: this\n                            }, (0, _defineProperty3.default)(_React$createElement6, '__self', this), (0, _defineProperty3.default)(_React$createElement6, 'data-qa-file', 'Form'), (0, _defineProperty3.default)(_React$createElement6, 'data-qa-file', 'Form'), _React$createElement6),\n                            _react2.default.createElement(_Error2.default, (_React$createElement5 = { className: (0, _classnames2.default)(classes.icon, classes.iconVariant), 'data-qa-file': 'Form',\n                                __source: {\n                                    fileName: _jsxFileName,\n                                    lineNumber: 386\n                                },\n                                __self: this\n                            }, (0, _defineProperty3.default)(_React$createElement5, '__self', this), (0, _defineProperty3.default)(_React$createElement5, 'data-qa-file', 'Form'), (0, _defineProperty3.default)(_React$createElement5, 'data-qa-file', 'Form'), _React$createElement5)),\n                            errorText\n                        ),\n                        'data-qa-file': 'Form',\n                        __source: {\n                            fileName: _jsxFileName,\n                            lineNumber: 382\n                        },\n                        __self: this\n                    }, (0, _defineProperty3.default)(_React$createElement7, '__self', this), (0, _defineProperty3.default)(_React$createElement7, 'data-qa-file', 'Form'), (0, _defineProperty3.default)(_React$createElement7, 'data-qa-file', 'Form'), _React$createElement7))\n                )\n            );\n        }\n    }]);\n    return Form;\n}(_react.Component), _class.propTypes = {\n    classes: _propTypes2.default.object.isRequired,\n    schema: _propTypes2.default.object.isRequired,\n    initialValues: _propTypes2.default.object,\n    langs: _propTypes2.default.array,\n    onChange: _propTypes2.default.func,\n    onSubmit: _propTypes2.default.func,\n    hidden: _propTypes2.default.bool,\n    isClickedSubmit: _propTypes2.default.bool\n}, _class.defaultProps = {\n    initialValues: {},\n    langs: [],\n    onChange: _noop2.default,\n    onSubmit: _noop2.default,\n    hidden: false,\n    isClickedSubmit: false\n}, _temp);\nexports.default = (0, _styles.withStyles)(materialStyles)(Form);",{"version":3,"sources":["src/apps/admin/ui/components/Form/Form.jsx"],"names":["materialStyles","form","display","flexDirection","width","error","backgroundColor","theme","palette","dark","success","main","icon","fontSize","iconVariant","opacity","marginRight","spacing","unit","message","alignItems","margin","Form","args","getFieldsValidators","props","schema","fields","reduce","validators","field","langs","newValidators","valueLangStructure","result","lang","name","getAnotherLangsChanges","value","state","values","currentLang","changesByLang","forEach","createField","i","hidden","validationMessages","FieldComponent","component","fieldName","validationMessage","fieldProps","onChange","handleFieldChange","onBlur","handleFieldBlur","isRequired","validator","key","news","initialValues","type","hint","validateForm","isValid","isAnotherLangValid","isCurrentLangValid","map","newValidationMessages","validateField","setState","isOnlyAnotherLangInvalid","filedName","options","validatorOptions","validatorsList","changes","newValues","handleSubmit","event","preventDefault","isClickedSubmit","onSubmit","errorText","handleHideFailMessage","nextProps","nextContext","classes","vertical","horizontal","Component","propTypes","PropTypes","object","array","func","bool","defaultProps","noop"],"mappings":"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","file":"Form.jsx","sourceRoot":"/Users/dimasabitov/Downloads/deltaway.20","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport classNames from 'classnames';\n\nimport FormControl from '@material-ui/core/FormControl';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport SnackbarContent from '@material-ui/core/SnackbarContent';\nimport ErrorIcon from '@material-ui/icons/Error';\nimport { withStyles } from '@material-ui/core/styles';\n\nimport getLangsValuesForArray from './utils/getLangsValuesForArray';\nimport getLangsValuesForObject from './utils/getLangsValuesForObject';\n\nimport noop from '@tinkoff/utils/function/noop';\nimport isEmpty from '@tinkoff/utils/is/empty';\nimport isObject from '@tinkoff/utils/is/plainObject';\nimport isArray from '@tinkoff/utils/is/array';\nimport isString from '@tinkoff/utils/is/string';\nimport forEach from '@tinkoff/utils/array/each';\nimport any from '@tinkoff/utils/array/any';\nimport clone from '@tinkoff/utils/clone';\n\nimport validatorsList from './validators';\n\nconst materialStyles = theme => ({\n    form: {\n        display: 'flex',\n        flexDirection: 'column',\n        width: '100%'\n    },\n    error: {\n        backgroundColor: theme.palette.error.dark\n    },\n    success: {\n        backgroundColor: theme.palette.success.main\n    },\n    icon: {\n        fontSize: 20\n    },\n    iconVariant: {\n        opacity: 0.9,\n        marginRight: theme.spacing.unit\n    },\n    message: {\n        display: 'flex',\n        alignItems: 'center'\n    },\n    margin: {\n        margin: theme.spacing.unit\n    }\n});\n\nclass Form extends Component {\n    static propTypes = {\n        classes: PropTypes.object.isRequired,\n        schema: PropTypes.object.isRequired,\n        initialValues: PropTypes.object,\n        langs: PropTypes.array,\n        onChange: PropTypes.func,\n        onSubmit: PropTypes.func,\n        hidden: PropTypes.bool,\n        isClickedSubmit: PropTypes.bool\n    };\n\n    static defaultProps = {\n        initialValues: {},\n        langs: [],\n        onChange: noop,\n        onSubmit: noop,\n        hidden: false,\n        isClickedSubmit: false\n    };\n\n    constructor (...args) {\n        super(...args);\n\n        this.state = {\n            values: clone(this.props.initialValues),\n            validationMessages: {},\n            lang: this.props.langs[0],\n            isClickedSubmit: this.props.isClickedSubmit\n        };\n        this.validators = this.getFieldsValidators();\n    }\n\n    // static getDerivedStateFromProps (props, state) {\n    //     if (props.isClickedSubmit !== state.isClickedSubmit) {\n    //         return {\n    //             showSuccess: true\n    //         };\n    //     }\n    //\n    //     return null;\n    // }\n\n    componentWillReceiveProps (nextProps, nextContext) {\n        if (nextProps.schema !== this.props.schema) {\n            this.validators = this.getFieldsValidators(nextProps);\n        }\n\n        if (nextProps.initialValues !== this.props.initialValues) {\n            this.setState({\n                values: clone(nextProps.initialValues)\n            });\n        }\n    }\n\n    getFieldsValidators = (props = this.props) => props.schema.fields\n        .reduce((validators, field) => {\n            if (!field.validators) {\n                return validators;\n            }\n\n            const { langs } = this.props;\n            let newValidators = {};\n\n            if (field.valueLangStructure) {\n                newValidators = langs.reduce((result, lang) => {\n                    return {\n                        ...result,\n                        [`${lang}_${field.name}`]: field.validators\n                    };\n                }, {});\n            } else {\n                newValidators[field.name] = field.validators;\n            }\n\n            return {\n                ...validators,\n                ...newValidators\n            };\n        }, {});\n\n    getAnotherLangsChanges = (field, value) => {\n        if (!field.valueLangStructure || isString(field.valueLangStructure)) {\n            return {};\n        }\n\n        const { langs } = this.props;\n        const { values, lang: currentLang } = this.state;\n        const changesByLang = {};\n\n        langs.forEach(lang => {\n            if (currentLang !== lang) {\n                if (isArray(field.valueLangStructure) && isArray(value)) {\n                    return getLangsValuesForArray(\n                        [`${lang}_${field.name}`],\n                        [`${lang}_${field.name}`],\n                        value,\n                        field.valueLangStructure,\n                        values, changesByLang\n                    );\n                }\n\n                if (isObject(field.valueLangStructure) && isObject(value)) {\n                    return getLangsValuesForObject(\n                        [`${lang}_${field.name}`],\n                        [`${lang}_${field.name}`],\n                        value,\n                        field.valueLangStructure,\n                        values,\n                        changesByLang\n                    );\n                }\n            }\n        }, {});\n\n        return changesByLang;\n    };\n\n    createField = (field, i) => {\n        if (field.hidden) {\n            return;\n        }\n\n        const { values, validationMessages, lang } = this.state;\n        const FieldComponent = field.component;\n        const fieldName = field.valueLangStructure ? `${lang}_${field.name}` : field.name;\n        const validationMessage = validationMessages[fieldName];\n\n        const fieldProps = {\n            onChange: this.handleFieldChange(field, fieldName),\n            onBlur: this.handleFieldBlur(field),\n            name: fieldName,\n            value: values[fieldName],\n            isRequired: any(validator => validator.name === 'required', field.validators || []),\n            validationMessage,\n            schema: field.schema || {},\n            key: i,\n            news: this.props.initialValues,\n            ...(field.type ? { type: field.type } : {})\n        };\n\n        return <FormControl key={i} error={!!validationMessage}>\n            <FieldComponent {...fieldProps} />\n            { field.hint && <FormHelperText>{field.hint}</FormHelperText> }\n            { validationMessage && <FormHelperText>{validationMessage}</FormHelperText> }\n        </FormControl>;\n    };\n\n    validateForm = () => {\n        const { langs, schema } = this.props;\n        const { lang: currentLang } = this.state;\n        let validationMessages = {};\n        let isValid = true;\n        let isAnotherLangValid = true;\n        let isCurrentLangValid = true;\n\n        schema.fields.map((field) => {\n            let newValidationMessages = {};\n\n            if (field.valueLangStructure) {\n                newValidationMessages = langs.reduce((result, lang) => {\n                    const validationMessage = this.validateField(`${lang}_${field.name}`);\n\n                    if (validationMessage) {\n                        if (isCurrentLangValid) {\n                            if (currentLang === lang) {\n                                isCurrentLangValid = false;\n                            }\n                        }\n                        if (isAnotherLangValid) {\n                            if (currentLang !== lang) {\n                                isAnotherLangValid = false;\n                            }\n                        }\n\n                        return {\n                            ...result,\n                            [`${lang}_${field.name}`]: validationMessage\n                        };\n                    }\n\n                    return result;\n                }, {});\n            } else {\n                const validationMessage = this.validateField(field.name);\n\n                if (validationMessage) {\n                    if (isCurrentLangValid) {\n                        isCurrentLangValid = false;\n                    }\n\n                    newValidationMessages[field.name] = validationMessage;\n                }\n            }\n\n            if (!isEmpty(newValidationMessages)) {\n                isValid = false;\n            }\n\n            validationMessages = {\n                ...validationMessages,\n                ...newValidationMessages\n            };\n        });\n\n        this.setState({\n            validationMessages\n        });\n\n        return { isValid, isOnlyAnotherLangInvalid: !isAnotherLangValid && isCurrentLangValid };\n    };\n\n    validateField = (filedName) => {\n        const { values } = this.state;\n        const validators = this.validators[filedName] || [];\n        let validationMessage = '';\n\n        forEach(({ name, options }) => {\n            const validatorOptions = isObject(options) ? options : {};\n            const validator = validatorsList[name];\n\n            if (validator && !validationMessage) {\n                validationMessage = validator(values[filedName], validatorOptions, values, filedName);\n            }\n        }, validators);\n\n        return validationMessage;\n    };\n\n    handleFieldChange = (field, fieldName) => (value) => {\n        const changes = {\n            ...this.getAnotherLangsChanges(field, value),\n            [fieldName]: value\n        };\n        const { values, validationMessages } = this.state;\n        const newValues = {\n            ...values,\n            ...changes\n        };\n\n        if ('lang' in changes) {\n            this.setState({\n                lang: newValues.lang\n            });\n        }\n\n        this.props.onChange(newValues, changes);\n        this.setState({\n            values: newValues,\n            validationMessages: {\n                ...validationMessages,\n                [fieldName]: ''\n            }\n        });\n    };\n\n    handleFieldBlur = (field) => () => {\n        const { validationMessages, lang } = this.state;\n\n        const fieldName = field.valueLangStructure ? `${lang}_${field.name}` : field.name;\n        const validationMessage = this.validateField(fieldName);\n\n        this.setState({\n            validationMessages: {\n                ...validationMessages,\n                [fieldName]: validationMessage\n            }\n        });\n    };\n\n    handleSubmit = async event => {\n        event.preventDefault();\n\n        if (this.state.isClickedSubmit) {\n            return;\n        }\n\n        this.state.isClickedSubmit = true;\n\n        const { isValid, isOnlyAnotherLangInvalid } = this.validateForm();\n\n        if (isValid) {\n            try {\n                await this.props.onSubmit(this.state.values);\n            } catch (e) {\n                this.setState({ errorText: e.error });\n                this.state.isClickedSubmit = false;\n            }\n        } else {\n            if (isOnlyAnotherLangInvalid) {\n                this.setState({\n                    errorText: 'Поправьте валидацию для других языков'\n                });\n                return;\n            }\n\n            this.setState({\n                errorText: 'Поправьте валидацию'\n            });\n\n            this.state.isClickedSubmit = false;\n        }\n    };\n\n    handleHideFailMessage = () => {\n        this.setState({\n            errorText: ''\n        });\n    };\n\n    render () {\n        const { schema, classes } = this.props;\n        const { errorText } = this.state;\n\n        return <div>\n            <form onSubmit={this.handleSubmit} className={classes.form}>\n                { schema.fields.map((field, i) => this.createField(field, i)) }\n            </form>\n            <Snackbar\n                anchorOrigin={{\n                    vertical: 'bottom',\n                    horizontal: 'right'\n                }}\n                onClose={this.handleHideFailMessage}\n                open={!!errorText}\n                autoHideDuration={2000}\n            >\n                <SnackbarContent\n                    className={classNames(classes.error, classes.margin)}\n                    message={\n                        <span id='client-snackbar' className={classes.message}>\n                            <ErrorIcon className={classNames(classes.icon, classes.iconVariant)} />\n                            { errorText }\n                        </span>\n                    }\n                />\n            </Snackbar>\n\n        </div>;\n    }\n}\n\nexport default withStyles(materialStyles)(Form);\n"]}]}