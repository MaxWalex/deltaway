{"remainingRequest":"/Users/dimasabitov/Downloads/deltaway.20/node_modules/babel-loader/lib/index.js??ref--13-2!/Users/dimasabitov/Downloads/deltaway.20/src/apps/client/utils/calcUserOrdersChanges.js","dependencies":[{"path":"/Users/dimasabitov/Downloads/deltaway.20/src/apps/client/utils/calcUserOrdersChanges.js","mtime":1671546513344},{"path":"/Users/dimasabitov/Downloads/deltaway.20/.babelrc","mtime":1671546158632},{"path":"/Users/dimasabitov/Downloads/deltaway.20/node_modules/cache-loader/dist/cjs.js","mtime":1671546959174},{"path":"/Users/dimasabitov/Downloads/deltaway.20/node_modules/babel-loader/lib/index.js","mtime":1671546957682}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _symbols = require('../../../../server/constants/symbols');\n\nvar _getAssetValues = require('./getAssetValues');\n\nvar _getAssetValues2 = _interopRequireDefault(_getAssetValues);\n\nvar _calculateBuyPrice = require('./calculateBuyPrice');\n\nvar _calculateBuyPrice2 = _interopRequireDefault(_calculateBuyPrice);\n\nvar _constants = require('../constants/constants');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = function (user, orders, prices) {\n    var userBalance = user.balance;\n\n    var ordersInfo = {};\n\n    orders.forEach(function (order) {\n        var symbolInfo = _symbols.CHART_SYMBOL_INFO_MAP[order.assetName];\n        var symbolPrice = prices[order.assetName];\n        var realSymbolPrice = order.type === 'buy' ? (0, _calculateBuyPrice2.default)(symbolInfo.name, symbolPrice) : symbolPrice;\n        var assetValues = (0, _getAssetValues2.default)(symbolInfo, { openingPrice: order.openingPrice, amount: order.amount, type: order.type }, realSymbolPrice, userBalance, _constants.COMMISSION);\n\n        userBalance = assetValues.balance;\n\n        ordersInfo[order.id] = {\n            price: symbolPrice,\n            commission: assetValues.commissionValue,\n            profit: assetValues.profit\n        };\n    });\n\n    return {\n        ordersInfo: ordersInfo,\n        balance: userBalance\n    };\n};",{"version":3,"sources":["src/apps/client/utils/calcUserOrdersChanges.js"],"names":["user","orders","prices","userBalance","balance","ordersInfo","forEach","symbolInfo","CHART_SYMBOL_INFO_MAP","order","assetName","symbolPrice","realSymbolPrice","type","name","assetValues","openingPrice","amount","COMMISSION","id","price","commission","commissionValue","profit"],"mappings":";;;;;;AAAA;;AACA;;;;AACA;;;;AACA;;;;kBAEe,UAACA,IAAD,EAAOC,MAAP,EAAeC,MAAf,EAA0B;AACrC,QAAIC,cAAcH,KAAKI,OAAvB;;AAEA,QAAMC,aAAa,EAAnB;;AAEAJ,WAAOK,OAAP,CAAe,iBAAS;AACpB,YAAMC,aAAaC,+BAAsBC,MAAMC,SAA5B,CAAnB;AACA,YAAMC,cAAcT,OAAOO,MAAMC,SAAb,CAApB;AACA,YAAME,kBAAkBH,MAAMI,IAAN,KAAe,KAAf,GAAuB,iCAAkBN,WAAWO,IAA7B,EAAmCH,WAAnC,CAAvB,GAAyEA,WAAjG;AACA,YAAMI,cAAc,8BAChBR,UADgB,EAEhB,EAAES,cAAcP,MAAMO,YAAtB,EAAoCC,QAAQR,MAAMQ,MAAlD,EAA0DJ,MAAMJ,MAAMI,IAAtE,EAFgB,EAGhBD,eAHgB,EAIhBT,WAJgB,EAKhBe,qBALgB,CAApB;;AAQAf,sBAAcY,YAAYX,OAA1B;;AAEAC,mBAAWI,MAAMU,EAAjB,IAAuB;AACnBC,mBAAOT,WADY;AAEnBU,wBAAYN,YAAYO,eAFL;AAGnBC,oBAAQR,YAAYQ;AAHD,SAAvB;AAKH,KAnBD;;AAqBA,WAAO;AACHlB,8BADG;AAEHD,iBAASD;AAFN,KAAP;AAIH,C","file":"calcUserOrdersChanges.js","sourceRoot":"/Users/dimasabitov/Downloads/deltaway.20","sourcesContent":["import { CHART_SYMBOL_INFO_MAP } from '../../../../server/constants/symbols';\nimport getAssetValues from './getAssetValues';\nimport calculateBuyPrice from './calculateBuyPrice';\nimport { COMMISSION } from '../constants/constants';\n\nexport default (user, orders, prices) => {\n    let userBalance = user.balance;\n\n    const ordersInfo = {};\n\n    orders.forEach(order => {\n        const symbolInfo = CHART_SYMBOL_INFO_MAP[order.assetName];\n        const symbolPrice = prices[order.assetName];\n        const realSymbolPrice = order.type === 'buy' ? calculateBuyPrice(symbolInfo.name, symbolPrice) : symbolPrice;\n        const assetValues = getAssetValues(\n            symbolInfo,\n            { openingPrice: order.openingPrice, amount: order.amount, type: order.type },\n            realSymbolPrice,\n            userBalance,\n            COMMISSION\n        );\n\n        userBalance = assetValues.balance;\n\n        ordersInfo[order.id] = {\n            price: symbolPrice,\n            commission: assetValues.commissionValue,\n            profit: assetValues.profit\n        };\n    });\n\n    return {\n        ordersInfo,\n        balance: userBalance\n    };\n};\n"]}]}